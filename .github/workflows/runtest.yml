name: test
on: [pull_request]  #, push]

jobs:
  # Runs the tests on combinations of the supported python/os matrix.
  test-code:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
      fail-fast: false
#      continue-on-error: true
    env:
      env_file: ${{ startsWith(matrix.os, 'macos') && '.github/test_conda_env_macOS.yml' || '.github/test_conda_env.yml' }}
      cache_key: ${{ matrix.os }}-py${{ matrix.python-version }}
      prefix: ${{ startsWith(matrix.os, 'ubuntu') && '/usr/share/miniconda3/envs/eqcorrscan-test' || startsWith(matrix.os, 'macos') && '/Users/runner/miniconda3/envs/eqcorrscan-test' || startsWith(matrix.os, 'windows') && 'C:\Miniconda3\envs\eqcorrscan-test' }}
    steps:
      - uses: actions/checkout@v2

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: conda-incubator/setup-miniconda@v2.1.1
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: eqcorrscan-test
          use-mamba: true
          python-version: ${{ matrix.python-version }}

      - uses: actions/cache@v2
        with:
          path: ${{ env.prefix }}
          key: ${{ env.cache_key }}-hash${{ hashFiles(env.env_file) }}-${{ steps.date.outputs.date }}-${{ env.CACHE_NUMBER }}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0
        id: cache

      - name: Update environment
        run: mamba env update -n eqcorrscan-test -f ${{ env.env_file }}
        if: steps.cache.outputs.cache-hit != 'true'

      - name: install eqcorrscan
        shell: bash -l {0}
        run: |
          pip install -e .

      - name: print package info
        shell: bash -l {0}
        run: |
          conda info -a
          conda list

#      - name: run all tests
#        shell: bash -l {0}
#        run: |
#          py.test -n 2 -m "not serial and not network and not superslow" --cov-report=xml
#          export OMP_NUM_THREADS=2
#          py.test -m "serial and not network" --cov-report=xml --cov-append
#          py.test -v -m "slow and not serial and not network" --cov-report=xml --cov-append

      - name: run main test suite
        shell: bash -l {0}
        run: |
          py.test -n 2 -m "not serial and not network and not superslow" --cov-report=xml

      - name: run serial test
        if: always()
        shell: bash -l {0}
        run: |
          export OMP_NUM_THREADS=2
          py.test -m "serial and not network" --cov-report=xml --cov-append

      - name: run slow tests
        if: always()
        shell: bash -l {0}
        run: |
          py.test -v -m "slow and not serial and not network" --cov-report=xml --cov-append

      - name: upload coverage
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          yml: ./codecov.yml
          fail_ci_if_error: true


  test-code-slow:
    runs-on: "ubuntu-latest"
    strategy:
      matrix:
        python-version: [3.8]
      fail-fast: false

    steps:
      - uses: actions/checkout@v2

      - name: Cache conda
        uses: actions/cache@v2
        env:
          # Increase this value to reset cache if needed by env file has not changed
          CACHE_NUMBER: 0
        with:
          path: ~/conda_pkgs_dir
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{
            hashFiles('.github/test_conda_env.yml') }}

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: 'latest'
          python-version: ${{ matrix.python-version }}
          activate-environment: eqcorrscan-test
          environment-file: .github/test_conda_env.yml
          condarc-file: .github/test_condarc.yml
          use-only-tar-bz2: true  # Must be set for caching to work properly

      - name: install eqcorrscan
        shell: bash -l {0}
        run: |
          pip install -e .

      - name: print package info
        shell: bash -l {0}
        run: |
          conda info -a
          conda list

      - name: run network tests
        shell: bash -l {0}
        run: |
          py.test -n 2 -m "network" --cov-report=xml
      - name: run tutorials
        if: always()
        shell: bash -l {0}
        run: |
          py.test eqcorrscan/doc/tutorials/*.rst eqcorrscan/doc/submodules/*.rst --cov-report=xml --cov-append
      - name: run superslow tests
        if: always()
        shell: bash -l {0}
        run: |
          py.test -m "superslow" -s eqcorrscan/tests/tutorials_test.py eqcorrscan/tests/subspace_test.py --cov-report=xml --cov-append

      - name: upload coverage
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          yml: ./codecov.yml
          fail_ci_if_error: true

# This is a very useful step for debugging, it allows you to ssh into the CI
# machine (https://github.com/marketplace/actions/debugging-with-tmate).
# Make sure to open the log before the job starts else you cant see the tmate
# url. See https://github.com/mxschmitt/action-tmate/issues/1.
# Also, the CI machine will close on a non-zero exit code (annoying). This can
# be overcome by coalescing the null command like so:
# $ some-command-that-can-fail || :
#
#- name: Setup tmate session
#  uses: mxschmitt/action-tmate@v1
